{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.8;\nimport \"./PriceConverter.sol\";\n\nerror FundMe__notOwner();\nerror FundMe__notEnoughETH();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n    uint256 public constant MINIMUM_USD = 50 * 1e18; //constant variables have different naming convention\n    address[] private s_Funders; //all vaiables which are storage variable, we have different naming convention of s_\n    mapping(address => uint256) private s_addressToAmountFunded; //all vaiables which are storage variable, we have different naming convention of s_\n    address private immutable i_owner; //different naming convention _i for immutable variables\n    AggregatorV3Interface private s_priceFeed; //all vaiables which are storage variable, we have different naming convention of s_\n\n    modifier onlyOwner() {\n        // require(msg.sender==i_owner);\n        if (msg.sender != i_owner) {\n            revert FundMe__notOwner();\n        } // both do same thing, but ths is more gas efficient\n        _;\n    }\n\n    constructor(address s_priceFeedAddress) {\n        i_owner = msg.sender; //msg.sender here the person who deploys the contract since it is in Constructor\n        s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\n    }\n\n    function fund() public payable {\n        if (msg.value.getConversionRate(s_priceFeed) <= MINIMUM_USD) {\n            revert FundMe__notEnoughETH();\n        }\n        // require(getConversionRate(msg.value) >= minimumUsd, \"Didn't send enough\");//1e18 = 1 * 10**28 gwei\n        s_Funders.push(msg.sender);\n        s_addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        for (uint256 fundIndex = 0; fundIndex < s_Funders.length; fundIndex++) {\n            address funder = s_Funders[fundIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        //reset the array\n        s_Funders = new address[](0);\n\n        //to withdraw funds we have 3 methods, transfer, send and call\n        //transfer\n        payable(msg.sender).transfer(address(this).balance);\n\n        //send\n        bool paymentSuccess = payable(msg.sender).send(address(this).balance);\n        require(paymentSuccess, \"FAIL\");\n\n        //call(recommended)\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\"); //returns 2 variable but we only need one\n        require(callSuccess, \"fail\");\n    }\n\n    function cheaperWithdraw() public onlyOwner {\n        address[] memory funders = s_Funders;\n        for (uint256 fundIndex = 0; fundIndex < funders.length; fundIndex++) {\n            address funder = funders[fundIndex];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        s_Funders = new address[](0);\n        // payable(msg.sender).transfer(address(this).balance);\n        (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(success);\n    }\n\n    //What if someone sends ETH to the contract address without calling FUND fucntion?\n\n    //solidity has two special functions for this 1)recieve() 2)fallback()\n\n    // receive() external payable {\n    //     fund();\n    // }\n\n    // fallback() external payable {\n    //     fund();\n    // }\n\n    function getAddressToAmountFunded(\n        address fundingAddress\n    ) public view returns (uint256) {\n        return s_addressToAmountFunded[fundingAddress];\n    }\n\n    function getFunders(uint256 index) public view returns (address) {\n        return s_Funders[index];\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        //ABI\n        //ADDRESS 0x694AA1769357215DE4FAC081bf1f309aDC325306\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\n        // );\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    // function getVersion() internal view returns (uint256) {\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\n    //         0x694AA1769357215DE4FAC081bf1f309aDC325306\n    //     );\n    //     return priceFeed.version();\n    // }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountinUsd = (ethPrice * ethAmount) / 1e10;\n\n        return ethAmountinUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
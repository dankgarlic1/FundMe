{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.8;\nimport \"./PriceConverter.sol\";\n\nerror notOwner();\n\ncontract FundMe {\n    using PriceConverter for uint256;\n    uint256 public constant MINIMUM_USD = 50 * 1e18; //constant variables have different naming convention\n\n    address[] Funders;\n    mapping(address => uint256) addressToAmountFunded;\n\n    address public immutable i_owner; //different naming convention _i for immutable variables\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender; //msg.sender here the person who deploys the contract since it is in Constructor\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD, //getConversionRate() takes two parameters ethAmount and addrss, msg.value by default is the first paramaeter so we will pass address only in paranthesis\n            \"Didn't Send Enough\"\n        );\n        // require(getConversionRate(msg.value) >= minimumUsd, \"Didn't send enough\");//1e18 = 1 * 10**28 gwei\n        Funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        for (uint256 fundIndex = 0; fundIndex < Funders.length; fundIndex++) {\n            address funder = Funders[fundIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        //reset the array\n        Funders = new address[](0);\n        //to withdraw funds we have 3 methods, transfer, send and call\n        //transfer\n        payable(msg.sender).transfer(address(this).balance);\n\n        //send\n        bool paymentSuccess = payable(msg.sender).send(address(this).balance);\n        require(paymentSuccess, \"FAIL\");\n\n        //call(recommended)\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\"); //returns 2 variable b ut we only need one\n        require(callSuccess, \"fail\");\n    }\n\n    modifier onlyOwner() {\n        // require(msg.sender==i_owner);\n        if (msg.sender != i_owner) {\n            revert notOwner();\n        } // both do same thing, but ths is more gas efficient\n        _;\n    }\n\n    //What if someone sends ETH to the contract address without calling FUND fucntion?\n\n    //solidity has two special functions for this 1)recieve() 2)fallback()\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        //ABI\n        //ADDRESS 0x694AA1769357215DE4FAC081bf1f309aDC325306\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\n        // );\n        (, int256 price, , , ) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n    // function getVersion() internal view returns (uint256) {\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\n    //         0x694AA1769357215DE4FAC081bf1f309aDC325306\n    //     );\n    //     return priceFeed.version();\n    // }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountinUsd = (ethPrice * ethAmount) / 1e10;\n\n        return ethAmountinUsd;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}